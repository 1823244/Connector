// Requests: HTTP для Людей (https://github.com/vbondarevsky/Requests).
//
// Copyright © 2017 Vladimir Bondarevskiy
//
// Данная лицензия разрешает лицам, получившим копию данного программного 
// обеспечения и сопутствующей документации (в дальнейшем именуемыми «Программное 
// Обеспечение»), безвозмездно использовать Программное Обеспечение без ограничений, 
// включая неограниченное право на использование, копирование, изменение, 
// добавление, публикацию, распространение, сублицензирование и/или продажу копий 
// Программного Обеспечения, также как и лицам, которым предоставляется данное 
// Программное Обеспечение, при соблюдении следующих условий:
//
// Указанное выше уведомление об авторском праве и данные условия должны быть 
// включены во все копии или значимые части данного Программного Обеспечения.
//
// ДАННОЕ ПРОГРАММНОЕ ОБЕСПЕЧЕНИЕ ПРЕДОСТАВЛЯЕТСЯ «КАК ЕСТЬ», БЕЗ КАКИХ-ЛИБО 
// ГАРАНТИЙ, ЯВНО ВЫРАЖЕННЫХ ИЛИ ПОДРАЗУМЕВАЕМЫХ, ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ 
// ГАРАНТИЯМИ ТОВАРНОЙ ПРИГОДНОСТИ, СООТВЕТСТВИЯ ПО ЕГО КОНКРЕТНОМУ НАЗНАЧЕНИЮ И 
// ОТСУТСТВИЯ НАРУШЕНИЙ ПРАВ. НИ В КАКОМ СЛУЧАЕ АВТОРЫ ИЛИ ПРАВООБЛАДАТЕЛИ НЕ НЕСУТ 
// ОТВЕТСТВЕННОСТИ ПО ИСКАМ О ВОЗМЕЩЕНИИ УЩЕРБА, УБЫТКОВ ИЛИ ДРУГИХ ТРЕБОВАНИЙ ПО 
// ДЕЙСТВУЮЩИМ КОНТРАКТАМ, ДЕЛИКТАМ ИЛИ ИНОМУ, ВОЗНИКШИМ ИЗ, ИМЕЮЩИМ ПРИЧИНОЙ ИЛИ 
// СВЯЗАННЫМ С ПРОГРАММНЫМ ОБЕСПЕЧЕНИЕМ ИЛИ ИСПОЛЬЗОВАНИЕМ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ 
// ИЛИ ИНЫМИ ДЕЙСТВИЯМИ С ПРОГРАММНЫМ ОБЕСПЕЧЕНИЕМ.
//
//
// Автор:  Vladimir Bondarevskiy
// e-mail: vbondarevsky@gmail.com
// Версия: 1.0.1
//
// Требования: платформа 1С версии 8.3.10 и выше

#Область ПрограммныйИнтерфейс

#Область МетодыHTTP

// TODO: Подготовить описание
// Отправляет GET-запрос
//
// Параметры:
//  URL                      - Строка    - URL ресурса, к которому будет отправлен запрос.
//  ПараметрыЗапроса         - Структруа - параметры, которые будут отправлены в URL
//  ДополнительныеПараметры  - Структура - дополнительные параметры:
//   *Данные - 
//   *Json - 
//   *Заголовоки - 
//   *Cookies - 
//   *ПараметрыЗапроса - Структура - см. ПараметрыЗапроса
//   *Файлы - 
//   *Аутентификация - 
//   *Таймаут - 
//   *РазрешитьПеренаправление - Булево - 
//   *Прокси - 
//   *ПроверятьSSL
//   *КлиентскийСертификатSSL
// 
// Возвращаемое значение:
// 	Структура - ответ сервера. 
//
Функция Get(URL, ПараметрыЗапроса = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Возврат ВызватьHTTPМетод(
		"GET", URL, Неопределено, Неопределено, ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецФункции

// TODO: Подготовить описание 
Функция Options(URL, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ВызватьHTTPМетод(
		"OPTIONS", URL, Неопределено, Неопределено, Неопределено, ДополнительныеПараметры);
	
КонецФункции

// TODO: Подготовить описание 
Функция Head(URL, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ВызватьHTTPМетод(
		"HEAD", URL, Неопределено, Неопределено, Неопределено, ДополнительныеПараметры);
	
КонецФункции

// TODO: Подготовить описание
Функция Post(URL, Данные = Неопределено, Json = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ВызватьHTTPМетод(
		"POST", URL, Данные, Json, Неопределено, ДополнительныеПараметры);

КонецФункции

// TODO: Подготовить описание
Функция Put(URL, Данные = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Возврат ВызватьHTTPМетод(
		"PUT", URL, Данные, Неопределено, Неопределено, ДополнительныеПараметры);
	
КонецФункции

// TODO: Подготовить описание
Функция Patch(URL, Данные = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Возврат ВызватьHTTPМетод(
		"PATCH", URL, Данные, Неопределено, Неопределено, ДополнительныеПараметры);
	
КонецФункции

// TODO: Подготовить описание 
Функция Delete(URL, Данные = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Возврат ВызватьHTTPМетод(
		"DELETE", URL, Данные, Неопределено, Неопределено, ДополнительныеПараметры);
	
КонецФункции

// TODO: Подготовить описание
// Отправляет данные на указанный адрес для обработки с использованием указанного HTTP-метода.
//
Функция ВызватьМетод(Метод, URL, ДополнительныеПараметры = Неопределено) Экспорт 

	Возврат ВызватьHTTPМетод(
		Метод, URL, Неопределено, Неопределено, Неопределено, ДополнительныеПараметры);
	
КонецФункции

#КонецОбласти

#Область ФорматыДанных

// TODO: Подготовить описание
Функция РезультатКакJson(Ответ, ПрочитатьВСоответствие = Истина) Экспорт
	
	Возврат JsonВОбъект(Ответ.ИсходныйОтвет.ПолучитьТелоКакПоток(), Ответ.Кодировка);
	
КонецФункции

// TODO: Подготовить описание
Функция РезультатКакТекст(Ответ, Кодировка = Неопределено) Экспорт
	                   
	Если Не ЗначениеЗаполнено(Кодировка) Тогда
		Кодировка = Ответ.Кодировка;
	КонецЕсли;
	
	Возврат Ответ.ИсходныйОтвет.ПолучитьТелоКакСтроку(Кодировка);
	
КонецФункции

// TODO: Подготовить описание
Функция РезультатКакДвоичныеДанные(Ответ, ВернутьПоток = Ложь) Экспорт
	
	Если ВернутьПоток Тогда
		Возврат Ответ.ИсходныйОтвет.ПолучитьТелоКакПоток();	
	Иначе
		Возврат Ответ.ИсходныйОтвет.ПолучитьТелоКакДвоичныеДанные();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Сессии

// TODO: Подготовить описание
Функция СоздатьСессию() Экспорт
	
	Сессия = Новый Структура;
	Сессия.Вставить("Заголовки", ЗаголовкиПоУмолчанию());
	Сессия.Вставить("Аутентификация", Неопределено);
	Сессия.Вставить("Прокси", Неопределено);
	Сессия.Вставить("ПараметрыЗапроса", Новый Структура);
	Сессия.Вставить("ПроверятьSSL", Истина);
	Сессия.Вставить("КлиентскийСертификатSSL", Неопределено);
	Сессия.Вставить("МаксимальноеКоличествоПеренаправлений", МаксимальноеКоличествоПеренаправлений());
	Сессия.Вставить("Cookies", Новый Соответствие); // TODO: см. cookiejar_from_dict({})
	
	Возврат Сессия;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВызватьHTTPМетод(Метод, URL, Данные, Json, ПараметрыЗапроса, ДополнительныеПараметры)
	
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Структура") Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Сессия = СоздатьСессию();
	
	Запрос = Новый Структура;
	Запрос.Вставить("Метод", ВРег(Метод));
	Запрос.Вставить("URL", URL);
	Запрос.Вставить("Заголовки", ВыбратьЗначение(Неопределено, ДополнительныеПараметры, "Заголовки", Новый Соответствие));
	Запрос.Вставить("Файлы", ВыбратьЗначение(Неопределено, ДополнительныеПараметры, "Файлы", Новый Массив));
	Запрос.Вставить("Данные", ВыбратьЗначение(Данные, ДополнительныеПараметры, "Данные", Новый Структура));
	Запрос.Вставить("Json", ВыбратьЗначение(Json, ДополнительныеПараметры, "Json", Новый Соответствие));
	Запрос.Вставить("ПараметрыЗапроса", ВыбратьЗначение(ПараметрыЗапроса, ДополнительныеПараметры, "ПараметрыЗапроса", Новый Структура));
	Запрос.Вставить("Аутентификация", ВыбратьЗначение(Неопределено, ДополнительныеПараметры, "Аутентификация", Новый Структура));
	Запрос.Вставить("Cookies", ВыбратьЗначение(Неопределено, ДополнительныеПараметры, "Cookies", Новый Структура));    // TODO: Не структура
	
	ПодготовленныйЗапрос = ПодготовитьЗапрос(Сессия, Запрос);
	
	// TODO: прокси
	
	РазрешитьПеренаправление = ?(ДополнительныеПараметры.Свойство("РазрешитьПеренаправление"), ДополнительныеПараметры.РазрешитьПеренаправление, ВРег(Метод) <> "HEAD");
	
	Настройки = Новый Структура;
	Если ДополнительныеПараметры.Свойство("Таймаут") И ЗначениеЗаполнено(ДополнительныеПараметры.Таймаут) Тогда
		Таймаут = ДополнительныеПараметры.Таймаут;
	Иначе
		Таймаут = СтандартныйТаймаут();
	КонецЕсли;	
	Настройки.Вставить("Таймаут", Таймаут);
	Настройки.Вставить("РазрешитьПеренаправление", РазрешитьПеренаправление);
	Настройки.Вставить("ПроверятьSSL", ?(ДополнительныеПараметры.Свойство("ПроверятьSSL"), ДополнительныеПараметры.ПроверятьSSL, Истина));
	Настройки.Вставить("КлиентскийСертификатSSL", ?(ДополнительныеПараметры.Свойство("КлиентскийСертификатSSL"), ДополнительныеПараметры.КлиентскийСертификатSSL, Неопределено));
	Настройки.Вставить("Прокси", ?(ДополнительныеПараметры.Свойство("Прокси"), ДополнительныеПараметры.Прокси, Неопределено));
	
	Возврат ОтправитьЗапрос(ПодготовленныйЗапрос, Настройки);
	
КонецФункции

Функция ПодготовитьЗапрос(Сессия, Запрос)
	
	ПодготовленныйЗапрос = Новый Структура;
	ПодготовленныйЗапрос.Вставить("Cookies", ОбъединитьCookies(Сессия.Cookies, Запрос.Cookies));
	ПодготовленныйЗапрос.Вставить("Аутентификация", ОбъединитьПараметрыАутентификации(Сессия.Аутентификация, Запрос.Аутентификация));
	ПодготовленныйЗапрос.Вставить("Метод", Запрос.Метод);
	ПодготовленныйЗапрос.Вставить("Заголовки", ОбъединитьЗаголовки(Сессия.Заголовки, Запрос.Заголовки));
	ПараметрыЗапроса = ОбъединитьПараметрыЗапроса(Сессия.ПараметрыЗапроса, Запрос.ПараметрыЗапроса);
	ПодготовленныйЗапрос.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	ПодготовленныйЗапрос.Вставить("URL", ПодготовитьURL(Запрос.URL, ПараметрыЗапроса));
	
	// TODO: подготовить заголовки - проверить валидность???
	// TODO: ПодготовитьCookies(ПодготовленныйЗапрос);
	ПодготовитьТелоЗапроса(ПодготовленныйЗапрос, Запрос.Данные, Запрос.Файлы, Запрос.Json);
	// TODO: ПодготовитьАутентификацию(ПодготовленныйЗапрос);

	Возврат ПодготовленныйЗапрос;
	
КонецФункции

Функция КодироватьПараметрыЗапроса(ПараметрыЗапроса)
	
	ЧастиПараметрыЗапроса = Новый Массив;
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Если ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда
			Значения = Параметр.Значение;
		Иначе
			Значения = Новый Массив;
			Значения.Добавить(Параметр.Значение);
		КонецЕсли;
		
		Для Каждого Значение Из Значения Цикл
			ЗначениеПараметра = КодироватьСтроку(Параметр.Значение, СпособКодированияСтроки.URLВКодировкеURL);
			ЧастиПараметрыЗапроса.Добавить(СтрШаблон("%1=%2", Параметр.Ключ, ЗначениеПараметра));
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиПараметрыЗапроса, "&");
	
КонецФункции

Функция ПодготовитьURL(Знач URL, ПараметрыЗапроса)
	
	URL = СокрЛ(URL);
	
	СтруктураURL = РазобратьURL(URL);
	
	Если Не ЗначениеЗаполнено(СтруктураURL.Схема) Тогда
		ВызватьИсключение("Пропущена схема");	
	КонецЕсли;
	
	ПодготовленныйURL = СтруктураURL.Схема + "://";
	Если ЗначениеЗаполнено(СтруктураURL.Аутентификация.Пользователь) Тогда
		ПодготовленныйURL = ПодготовленныйURL 
			+ СтруктураURL.Аутентификация.Пользователь + ":"
			+ СтруктураURL.Аутентификация.Пароль + "@";
	КонецЕсли;
	ПодготовленныйURL = ПодготовленныйURL + СтруктураURL.Сервер;
	Если ЗначениеЗаполнено(СтруктураURL.Порт) Тогда
		ПодготовленныйURL = ПодготовленныйURL + ":" + Формат(СтруктураURL.Порт, "ЧРГ=; ЧГ=");
	КонецЕсли;
	
	ПодготовленныйURL = ПодготовленныйURL + СобратьАдресРесурса(СтруктураURL, ПараметрыЗапроса);
		
	Возврат ПодготовленныйURL;
	
КонецФункции

Процедура ПодготовитьТелоЗапроса(ПодготовленныйЗапрос, Данные, Файлы, Json)
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = СобратьАдресРесурса(РазобратьURL(ПодготовленныйЗапрос.URL), ПодготовленныйЗапрос.ПараметрыЗапроса);
	Если ЗначениеЗаполнено(Файлы) ИЛИ ЗначениеЗаполнено(Данные) Тогда
		Если ЗначениеЗаполнено(Файлы) Тогда
			// TODO: Отправка файлов
		ИначеЕсли ЗначениеЗаполнено(Данные) Тогда
			ЗначениеЗаголовка = ПолучитьЗначениеЗаголовка("content-type", ПодготовленныйЗапрос.Заголовки);
			Если ЗначениеЗаголовка = Ложь Тогда
				ПодготовленныйЗапрос.Заголовки["Content-Type"] = "application/x-www-form-urlencoded";	
			КонецЕсли;
			HTTPЗапрос.УстановитьТелоИзСтроки(
				КодироватьПараметрыЗапроса(Данные), 
				КодировкаТекста.UTF8, 
				ИспользованиеByteOrderMark.НеИспользовать);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Json) Тогда
		ПодготовленныйЗапрос.Заголовки.Вставить("Content-Type", "application/json");
		HTTPЗапрос.УстановитьТелоИзСтроки(ОбъектВJson(Json), КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	HTTPЗапрос.Заголовки = ПодготовленныйЗапрос.Заголовки;
	ПодготовленныйЗапрос.Вставить("HTTPЗапрос", HTTPЗапрос);
	
КонецПроцедуры

Функция ОбъединитьCookies(ГлавныйИсточник, ДополнительныйИсточник)
	
	Возврат Новый Структура; // TODO: сделать объединение cookies
	
КонецФункции

Функция ОбъединитьПараметрыАутентификации(ГлавныйИсточник, ДополнительныйИсточник)
	
	Возврат Новый Структура; // TODO: Сделать объединение параметров аутентификации
	
КонецФункции

Функция ОбъединитьЗаголовки(ГлавныйИсточник, ДополнительныйИсточник)
	
	Заголовки = Новый Соответствие;
	Для Каждого Заголовок Из ГлавныйИсточник Цикл
		Заголовки.Вставить(Заголовок.Ключ, Заголовок.Значение);
	КонецЦикла;
	Для Каждого Заголовок Из ДополнительныйИсточник Цикл
		Если Заголовки.Получить(Заголовок.Ключ) = Неопределено Тогда
			Заголовки.Вставить(Заголовок.Ключ, Заголовок.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Заголовки;
	
КонецФункции

Функция ОбъединитьПараметрыЗапроса(ГлавныйИсточник, ДополнительныйИсточник)
	
	ПараметрыЗапроса = Новый Структура;
	Если ТипЗнч(ГлавныйИсточник) = Тип("Структура") Тогда
		Для Каждого Параметр Из ГлавныйИсточник Цикл
			ПараметрыЗапроса.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
	КонецЕсли;
	Если ТипЗнч(ДополнительныйИсточник) = Тип("Структура") Тогда
		Для Каждого Параметр Из ДополнительныйИсточник Цикл
			Если Не ПараметрыЗапроса.Свойство(Параметр) Тогда
				ПараметрыЗапроса.Вставить(Параметр.Ключ, Параметр.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ОтправитьЗапрос(ПодготовленныйЗапрос, Настройки)
	
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Соединение = ПолучитьСоединение(РазобратьURL(ПодготовленныйЗапрос.URL), Настройки);
	Ответ = Соединение.ВызватьHTTPМетод(ПодготовленныйЗапрос.Метод, ПодготовленныйЗапрос.HTTPЗапрос);
	
	ПодготовленныйОтвет = Новый Структура;
	ПодготовленныйОтвет.Вставить("ВремяВыполнения", ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало);
	ПодготовленныйОтвет.Вставить("Cookies", Новый Структура);  // TODO: Извлечь cookies 
	ПодготовленныйОтвет.Вставить("Заголовки", Ответ.Заголовки); 
	ПодготовленныйОтвет.Вставить("История", Новый Соответствие);  // TODO: История редиректов
	ПодготовленныйОтвет.Вставить("ЭтоПостоянныйРедирект", ЭтоПостоянныйРедирект(Ответ.КодСостояния, Ответ.Заголовки));
	ПодготовленныйОтвет.Вставить("ЭтоРедирект", ЭтоРедирект(Ответ.КодСостояния, Ответ.Заголовки));
	ПодготовленныйОтвет.Вставить("Ссылки", ИзвлечьСсылки(Ответ.Заголовки));
	ПодготовленныйОтвет.Вставить("Кодировка", ПолучитьКодировкуИзЗаголовков(Ответ.Заголовки));
	ПодготовленныйОтвет.Вставить("ИсходныйОтвет", Ответ);
	ПодготовленныйОтвет.Вставить("Запрос", ПодготовленныйЗапрос); 
	ПодготовленныйОтвет.Вставить("КодСостояния", Ответ.КодСостояния);
	ПодготовленныйОтвет.Вставить("URL", ПодготовленныйЗапрос.URL);
	ПодготовленныйОтвет.Вставить("Соединение", Соединение);
		
	// TODO: Доделать перенаправление
	Если Настройки.РазрешитьПеренаправление Тогда
		Если ПодготовленныйОтвет.ЭтоРедирект Тогда
			НовоеРасположение = ПолучитьЗначениеЗаголовка("location", ПодготовленныйОтвет.Заголовки);
			
		КонецЕсли;
	Иначе
		
	КонецЕсли;
	
	Возврат ПодготовленныйОтвет;
	
КонецФункции

Функция ИзвлечьСсылки(Заголовки)
	
	Ссылки = Новый Массив;
	
	// TODO: извлечь ссылки из заголовков
	
	Возврат Ссылки;
	
КонецФункции

Функция ПолучитьЗначениеЗаголовка(Заголовок, ВсеЗаголовки)
	
	Для Каждого ОчереднойЗаголовок Из ВсеЗаголовки Цикл
		Если НРег(ОчереднойЗаголовок.Ключ) = НРег(Заголовок) Тогда
			Возврат ОчереднойЗаголовок.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоПостоянныйРедирект(КодСостояния, Заголовки)
	
	Возврат ЕстьЗаголовокLocation(Заголовки) И (КодСостояния = 301 ИЛИ КодСостояния = 308);
	
КонецФункции

Функция ЭтоРедирект(КодСостояния, Заголовки)
	
	СостоянияРедиректа = Новый Массив;
	СостоянияРедиректа.Добавить(301);
	СостоянияРедиректа.Добавить(302);
	СостоянияРедиректа.Добавить(303);
	СостоянияРедиректа.Добавить(307);
	СостоянияРедиректа.Добавить(308);
	
	Возврат ЕстьЗаголовокLocation(Заголовки) И СостоянияРедиректа.Найти(КодСостояния) <> Неопределено;
	
КонецФункции

Функция ЕстьЗаголовокLocation(Заголовки)
	
	Возврат ПолучитьЗначениеЗаголовка("location", Заголовки) <> Ложь;
	
КонецФункции

Функция ПолучитьКодировкуИзЗаголовков(Заголовки)
	
	Значение = ПолучитьЗначениеЗаголовка("content-type", Заголовки);
	
	Если Значение = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Опции = Новый Соответствие;
	ТипСодержимого = Неопределено;
	
	Значение = ";" + Значение;
	Пока Сред(Значение, 1, 1) = ";" Цикл
		Значение = Сред(Значение, 2);
		Конец = СтрНайти(Значение, ";");
		Пока Конец И (СтрСчитать(Значение, """", 1, Конец) - СтрСчитать(Значение, "\""", 1, Конец)) % 2 Цикл
			Конец = СтрНайти(Значение, ";", НаправлениеПоиска.СНачала, Конец + 1);	
		КонецЦикла;
		Если Конец = 0 Тогда
			Конец = СтрДлина(Значение) + 1;
		КонецЕсли;
		ЧастьСтрока = Сред(Значение, 1, Конец - 1);
		Значение = Сред(Значение, Конец);	
		
		Если Не ЗначениеЗаполнено(ТипСодержимого) Тогда
			ТипСодержимого = ЧастьСтрока;
			Продолжить;
		КонецЕсли;
		
		Индекс = СтрНайти(ЧастьСтрока, "=");
		Если Индекс Тогда
			ИмяОпции = НРег(СокрЛП(Сред(ЧастьСтрока, 1, Индекс - 1)));
			Опция = СокрЛП(Сред(ЧастьСтрока, Индекс + 1));
			Если СтрДлина(Опция) >= 2 И Сред(Опция, 1, 1) = """" И Сред(Опция, СтрДлина(Опция) - 1) = """" Тогда
				Опция = Сред(Опция, 2, СтрДлина(Опция) - 2);
				Опция = СтрЗаменить(Опция, "\\", "\");
				Опция = СтрЗаменить(Опция, "\""", """");
			КонецЕсли;
			Опции[ИмяОпции] = Опция;
		КонецЕсли;
	КонецЦикла;
	
	Если Опции.Получить("charset") <> Неопределено Тогда
		Опция = Опции["charset"];
		Если (Сред(Опция, 1, 1) = """" И Сред(Опция, СтрДлина(Опция) - 1) = """")
			ИЛИ (Сред(Опция, 1, 1) = "'" И Сред(Опция, СтрДлина(Опция) - 1) = "'") Тогда
			Опция = Сред(Опция, 2, СтрДлина(Опция) - 2); 
		КонецЕсли;
		Возврат Опция;
	КонецЕсли;	
	Если СтрНайти(ТипСодержимого, "text") Тогда
		Возврат "ISO-8859-1";
	КонецЕсли;	
	
КонецФункции

Функция СтрСчитать(Строка, ЧтоСчитать, Начало, Конец)
	
	Возврат СтрЧислоВхождений(Сред(Строка, Начало, Конец), ЧтоСчитать);
	
КонецФункции

Функция СобратьАдресРесурса(СтруктураURL, ПараметрыЗапроса)
	
	АдресРесурса = СтруктураURL.Путь;
	
	ОбъединенныеПараметрыЗапроса = ОбъединитьПараметрыЗапроса(ПараметрыЗапроса, СтруктураURL.ПараметрыЗапроса);
	Если ЗначениеЗаполнено(ОбъединенныеПараметрыЗапроса) Тогда
		АдресРесурса = АдресРесурса + "?" + КодироватьПараметрыЗапроса(ОбъединенныеПараметрыЗапроса);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураURL.Фрагмент) Тогда
		АдресРесурса = АдресРесурса + "#" + СтруктураURL.Фрагмент;
	КонецЕсли;
	
	Возврат АдресРесурса;
	
КонецФункции

Функция ЗаголовкиПоУмолчанию()
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept-Encoding", "identity"); // Просим ответ без сжатия
	Заголовки.Вставить("Connection", "keep-alive");
	
	Возврат Заголовки;
	
КонецФункции

Функция ПолучитьСоединение(ПараметрыСоединения, ДополнительныеПараметры)
	
	ЗащищенноеСоединение = Неопределено;
	Если ПараметрыСоединения.Схема = "https" Тогда
		Если Не ЗначениеЗаполнено(ПараметрыСоединения.Порт) Тогда
			ПараметрыСоединения.Порт = 443;
		КонецЕсли;
		СертификатыУЦ = Новый СертификатыУдостоверяющихЦентровОС;
		Если ДополнительныеПараметры.ПроверятьSSL = Ложь Тогда
			СертификатыУЦ = Неопределено;
		ИначеЕсли ТипЗнч(ДополнительныеПараметры.ПроверятьSSL) = Тип("СертификатыУдостоверяющихЦентровФайл") Тогда
			СертификатыУЦ = ДополнительныеПараметры.ПроверятьSSL;
		КонецЕсли;
		КлиентскийСертификат = Неопределено;
		Если ДополнительныеПараметры.КлиентскийСертификатSSL = Тип("СертификатКлиентаФайл") 
			ИЛИ ДополнительныеПараметры.КлиентскийСертификатSSL = Тип("СертификатКлиентаWindows") Тогда
			КлиентскийСертификат = ДополнительныеПараметры.КлиентскийСертификатSSL;
		КонецЕсли;
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(КлиентскийСертификат, СертификатыУЦ);
	ИначеЕсли ПараметрыСоединения.Схема = "http" Тогда
		Если Не ЗначениеЗаполнено(ПараметрыСоединения.Порт) Тогда
			ПараметрыСоединения.Порт = 80;
		КонецЕсли;	
	КонецЕсли;
	  
	Возврат Новый HTTPСоединение(
		ПараметрыСоединения.Сервер,
		ПараметрыСоединения.Порт,
		"", "",  // TODO: Аутентификация
		, // TODO: Прокси 
		ДополнительныеПараметры.Таймаут, 
		ЗащищенноеСоединение);	
	
КонецФункции

Функция ВыбратьЗначение(Значение1, Значение2, Ключ, ЗначениеПоУмолчанию)
	
	Если ЗначениеЗаполнено(Значение1) Тогда
		Возврат Значение1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение2) И ЗначениеЗаполнено(Ключ) 
		И ТипЗнч(Значение2) = Тип("Структура")
		И Значение2.Свойство(Ключ) И ЗначениеЗаполнено(Значение2[Ключ]) Тогда
		Возврат Значение2[Ключ];
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

Функция РазделитьПоПервомуНайденномуРазделителю(Строка, Разделители)
	
	МинимальныйИндекс = СтрДлина(Строка);
	ПервыйРазделитель = "";
	
	Для Каждого Разделитель Из Разделители Цикл
		Индекс = СтрНайти(Строка, Разделитель);
		Если Индекс = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если Индекс < МинимальныйИндекс Тогда
			МинимальныйИндекс = Индекс;
			ПервыйРазделитель = Разделитель;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Массив;
	Если ЗначениеЗаполнено(ПервыйРазделитель) Тогда
		Результат.Добавить(Лев(Строка, МинимальныйИндекс - 1));
		Результат.Добавить(Сред(Строка, МинимальныйИндекс + СтрДлина(ПервыйРазделитель)));
		Результат.Добавить(ПервыйРазделитель);
	Иначе
		Результат.Добавить(Строка);
		Результат.Добавить("");
		Результат.Добавить(Неопределено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура РазбитьСтрокуПоРазделителю(ИзвлекаемаяЧасть, ОстальнаяЧасть, Разделитель, Инверсия = Ложь)
	
	Индекс = СтрНайти(ОстальнаяЧасть, Разделитель);
	Если Индекс Тогда
		ИзвлекаемаяЧасть = Лев(ОстальнаяЧасть, Индекс - 1);
		ОстальнаяЧасть = Сред(ОстальнаяЧасть, Индекс + СтрДлина(Разделитель));
		Если Инверсия Тогда
			ДляОбмена = ИзвлекаемаяЧасть;
			ИзвлекаемаяЧасть = ОстальнаяЧасть;
			ОстальнаяЧасть = ДляОбмена;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция РазобратьURL(Знач URL)

	Схема = "";
	РазбитьСтрокуПоРазделителю(Схема, URL, "://");
	
	Путь = "";
	Результат = РазделитьПоПервомуНайденномуРазделителю(URL, СтрРазделить("/,?,#", ","));
	URL = Результат[0];
	Если ЗначениеЗаполнено(Результат[2]) Тогда
		Путь = Результат[2] + Результат[1];
	КонецЕсли;
	
	Аутентификация = Новый Структура("Пользователь, Пароль", "", "");
	АутентификацияСтрока = "";
	РазбитьСтрокуПоРазделителю(АутентификацияСтрока, URL, "@");
	Если ЗначениеЗаполнено(АутентификацияСтрока) Тогда
		АутентификацияЧасти = СтрРазделить(АутентификацияСтрока, ":");
		Аутентификация.Пользователь = АутентификацияЧасти[0];
		Аутентификация.Пароль       = АутентификацияЧасти[1];
	КонецЕсли;	

	// IPv6
	Сервер = "";
	РазбитьСтрокуПоРазделителю(Сервер, URL, "]");
	Если ЗначениеЗаполнено(Сервер) Тогда
		Сервер = Сервер + "]";
	КонецЕсли;
	
	Порт = "";
	РазбитьСтрокуПоРазделителю(Порт, URL, ":");
	
	Если Не ЗначениеЗаполнено(Сервер) Тогда
		Сервер = URL;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Порт) Тогда 
		Порт = Число(Порт);
	Иначе
		Порт = 0;
	КонецЕсли;
	
	Фрагмент = "";
	РазбитьСтрокуПоРазделителю(Фрагмент, Путь, "#", Истина);
	
	ПараметрыЗапроса = Новый Структура;
	Запрос = "";
	РазбитьСтрокуПоРазделителю(Запрос, Путь, "?", Истина);
	Запрос = РаскодироватьСтроку(Запрос, СпособКодированияСтроки.URLВКодировкеURL);
	Для Каждого СтрокаКлючРавноПараметр Из СтрРазделить(Запрос, "&", Ложь) Цикл
		КлючПараметр = СтрРазделить(СтрокаКлючРавноПараметр, "=");
		Если ПараметрыЗапроса.Свойство(КлючПараметр[0]) Тогда
			Если ТипЗнч(КлючПараметр[1]) = Тип("Массив") Тогда
				ПараметрыЗапроса[КлючПараметр[0]].Добавить(КлючПараметр[1]);
			Иначе
				Значения = Новый Массив;
				Значения.Добавить(ПараметрыЗапроса[КлючПараметр[0]]);
				Значения.Добавить(КлючПараметр[1]);
				ПараметрыЗапроса[КлючПараметр[0]] = Значения;
			КонецЕсли;
		Иначе
			ПараметрыЗапроса.Вставить(КлючПараметр[0], КлючПараметр[1]);
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Аутентификация", Аутентификация);
	Результат.Вставить("Сервер", Сервер);
	Результат.Вставить("Порт", Порт);
	Результат.Вставить("Путь", ?(ЗначениеЗаполнено(Путь), Путь, "/"));
	Результат.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	Результат.Вставить("Фрагмент", Фрагмент);

	Возврат Результат;
	
КонецФункции

Функция ОбъектВJson(Объект)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Объект);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция JsonВОбъект(Json, Кодировка = "utf-8", ПрочитатьВСоответствие = Истина)
	
	Ридер = Новый ЧтениеJSON;
	Ридер.ОткрытьПоток(Json, Кодировка);
	Объект = ПрочитатьJSON(Ридер, ПрочитатьВСоответствие);
	Ридер.Закрыть();
	
	Возврат Объект;

КонецФункции

#Область ПараметрыПоУмолчанию

Функция МаксимальноеКоличествоПеренаправлений()
	
	Возврат 30;
	
КонецФункции

Функция СтандартныйТаймаут()
	
	Возврат 30;
	
КонецФункции

#КонецОбласти

#КонецОбласти